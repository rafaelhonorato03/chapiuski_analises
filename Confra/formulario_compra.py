from dotenv import load_dotenv
import streamlit as st
import pandas as pd
import os
import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from email.mime.base import MIMEBase
from email import encoders
from datetime import datetime
import gspread
from google.oauth2.service_account import Credentials
import re
import json

# Carrega vari√°veis de ambiente
load_dotenv()

scopes = [
    "https://www.googleapis.com/auth/spreadsheets",
    "https://www.googleapis.com/auth/drive"
]

CREDENTIALS_JSON = os.getenv('GOOGLE_SHEETS_CREDENTIALS')
st.text(f"Conte√∫do bruto da credencial: {repr(CREDENTIALS_JSON)}")
sheet_id = os.getenv("GOOGLE_SHEET_ID")

if not CREDENTIALS_JSON:
    st.error("Vari√°vel de ambiente GOOGLE_SHEETS_CREDENTIALS n√£o encontrada!")
    st.stop()

import re # Certifique-se que 'import re' est√° no topo do seu script
# ... outras importa√ß√µes

CREDENTIALS_JSON_RAW = os.getenv('GOOGLE_SHEETS_CREDENTIALS')

if not CREDENTIALS_JSON_RAW:
    st.error("Vari√°vel de ambiente GOOGLE_SHEETS_CREDENTIALS n√£o encontrada!")
    st.stop()

st.text(f"Conte√∫do bruto recebido: {repr(CREDENTIALS_JSON_RAW)}") # Linha de depura√ß√£o

try:
    # Tentativa 1: Tentar carregar diretamente (pode funcionar em alguns casos)
    try:
        creds_info = json.loads(CREDENTIALS_JSON_RAW)
        st.success("JSON decodificado diretamente com sucesso!") # Linha de depura√ß√£o
    except json.JSONDecodeError as e1:
        st.warning(f"Falha ao carregar diretamente: {e1}. Tentando normalizar a private_key...")

        # Tentativa 2: Normalizar novas linhas APENAS dentro do valor da private_key
        # Esta fun√ß√£o auxiliar substitui \n por \\n dentro do conte√∫do da chave privada
        def escape_newlines_in_key(match):
            key_content = match.group(1)
            # Substitui a nova linha literal por uma nova linha escapada para JSON
            escaped_content = key_content.replace('\n', '\\n') 
            return f'"private_key": "{escaped_content}"'

        # Regex para encontrar "private_key": "-----BEGIN ... -----END PRIVATE KEY-----\n"
        # Captura o conte√∫do entre as aspas. re.DOTALL permite que '.' corresponda a novas linhas.
        pattern = r'"private_key":\s*"((?:-----BEGIN PRIVATE KEY-----(?:.|\n)*?-----END PRIVATE KEY-----))"'
        
        # Verifica se o padr√£o √© encontrado antes de tentar substituir
        if re.search(pattern, CREDENTIALS_JSON_RAW, re.DOTALL):
             # Aplica a substitui√ß√£o usando a fun√ß√£o auxiliar
             creds_json_normalized = re.sub(pattern, escape_newlines_in_key, CREDENTIALS_JSON_RAW, count=1, flags=re.DOTALL)
             st.text(f"Conte√∫do ap√≥s normaliza√ß√£o da chave: {repr(creds_json_normalized)}") # Linha de depura√ß√£o
             try:
                 # Tenta carregar o JSON com a chave privada normalizada
                 creds_info = json.loads(creds_json_normalized)
                 st.success("JSON decodificado com sucesso ap√≥s normaliza√ß√£o da chave!") # Linha de depura√ß√£o
             except json.JSONDecodeError as e2:
                 st.error(f"Erro ao decodificar JSON ap√≥s normaliza√ß√£o da chave: {e2}")
                 st.text(f"Conte√∫do normalizado que falhou: {repr(creds_json_normalized)}")
                 st.stop()
        else:
             # Se o padr√£o da chave privada n√£o for encontrado (improv√°vel, mas seguro verificar)
             st.error("N√£o foi poss√≠vel encontrar o padr√£o 'private_key' no JSON para normaliza√ß√£o.")
             st.text(f"Conte√∫do bruto que falhou na busca do padr√£o: {repr(CREDENTIALS_JSON_RAW)}")
             st.stop()

except Exception as ex:
    # Captura outros erros inesperados durante o processo
    st.error(f"Ocorreu um erro inesperado ao processar as credenciais: {ex}")
    st.text(f"Conte√∫do bruto no momento do erro: {repr(CREDENTIALS_JSON_RAW)}")
    st.stop()

# --- Continue com o resto do seu script usando creds_info ---
# Exemplo:
# creds = Credentials.from_service_account_info(creds_info, scopes=scopes)
# gc = gspread.authorize(creds)
# ...

# Lembre-se de remover as linhas st.text de depura√ß√£o quando confirmar que funciona.

creds = Credentials.from_service_account_info(creds_info, scopes=scopes)
gc = gspread.authorize(creds)

spreadsheet = gc.open_by_key(sheet_id)

# Selecionar aba
sheet = spreadsheet.worksheet("P√°gina1")  # ou pelo nome da aba

# Ler dados existentes
dados = sheet.get_all_records()

# Converter para DataFrame
df_compras = pd.DataFrame(dados)

total_vendidos = df_compras['Quantidade'].sum() if not df_compras.empty else 0

arquivo_csv = os.path.join(os.path.dirname(__file__), "compras_ingressos.csv")


def email_valido(email):
    return re.match(r"[^@]+@[^@]+\.[^@]+", email)

def enviar_email(remetente, senha, destinatarios, assunto, corpo, comprovante, arquivo_csv):
    msg = MIMEMultipart()
    msg['Subject'] = assunto
    msg['From'] = remetente
    msg['To'] = ", ".join(destinatarios)
    msg.attach(MIMEText(corpo, 'plain'))

    # Anexa o comprovante
    if comprovante is not None:
        part = MIMEBase('application', "octet-stream")
        file_data = comprovante.getvalue()
        part.set_payload(file_data)
        encoders.encode_base64(part)
        part.add_header('Content-Disposition', f'attachment; filename="{comprovante.name}"')
        msg.attach(part)

    # Anexa o CSV como backup
    if os.path.exists(arquivo_csv):
        with open(arquivo_csv, "rb") as f:
            part_csv = MIMEBase('application', "octet-stream")
            part_csv.set_payload(f.read())
            encoders.encode_base64(part_csv)
            part_csv.add_header('Content-Disposition', f'attachment; filename="{os.path.basename(arquivo_csv)}"')
            msg.attach(part_csv)

    with smtplib.SMTP_SSL('smtp.gmail.com', 465) as server:
        server.login(remetente, senha)
        server.sendmail(remetente, destinatarios, msg.as_string())


# --- Estoque ---
estoque_lotes = {
    "1¬∫ LOTE PROMOCIONAL": 2,
    "2¬∫ LOTE": 1,
}

# --- Definir lote atual ---
if total_vendidos < estoque_lotes["1¬∫ LOTE PROMOCIONAL"]:
    lote_atual = "1¬∫ LOTE PROMOCIONAL"
    link_pagamento = "https://pag.ae/7_FMHdgNJ"
    estoque_disponivel = estoque_lotes["1¬∫ LOTE PROMOCIONAL"] - total_vendidos
    lote_info = "RS 100,00 no PIX ou RS 105,00 no link (em at√© 10x)"
elif total_vendidos < (estoque_lotes["1¬∫ LOTE PROMOCIONAL"] + estoque_lotes["2¬∫ LOTE"]):
    lote_atual = "2¬∫ LOTE"
    link_pagamento = "https://pag.ae/7_FMKBcQs"
    estoque_disponivel = (estoque_lotes["1¬∫ LOTE PROMOCIONAL"] + estoque_lotes["2¬∫ LOTE"]) - total_vendidos
    lote_info = "RS 120,00 no PIX ou RS 125,00 no link (em at√© 10x)"
else:
    lote_atual = "Ingressos esgotados"
    link_pagamento = None
    estoque_disponivel = 0
    lote_info = ""

# --- Layout ---
col1, col2, col3 = st.columns([1,2,1])
with col2:
    st.image("Confra/chapiuski.jpg", width=800)

st.title("Compra de Ingressos - Confra Chapiuski 2025")

st.markdown("""
**ü•©üçª OPEN FOOD & OPEN BAR!**
- Churrasco, guarni√ß√µes, lanches de cupim e costela, chopp, vodka, cacha√ßa, refrigerantes, sucos e √°gua √† vontade!

**üé∂ ATRA√á√ÉO IMPERD√çVEL!**
- Grupo de pagode com o Alem√£o! Das 17h √†s 20h30 (com pausa de 30 min)

**‚è∞ Encerramento: 22h**

**üí∞ VALORES**
- 1¬∫ LOTE PROMOCIONAL: **RS 100,00 no PIX** ou **RS 105,00 no link** (em at√© 10x)
- 2¬∫ e 3¬∫ LOTE: valores e datas a definir ap√≥s o t√©rmino do lote promocional.

**üí≥ FORMAS DE PAGAMENTO**
- PIX com desconto: **(11)99499-1465**
- D√©bito e Cr√©dito: Link de pagamento (at√© 10x com taxa)

**‚ö†Ô∏è REGRAS**
- Crian√ßas at√© 12 anos n√£o pagam. A partir de 13 anos, pagam integral.
- Documento com foto obrigat√≥rio na entrada.
- Elevador: uso exclusivo para idosos e PCD.
- Proibido drogas il√≠citas e narguil√©.
- Preencha o site e envie o comprovante para validar sua compra.

üéä **Garanta j√° seu ingresso e venha comemorar o 8¬∞ ano do Chapiuski!** üéä
""")

# --- Lote ---
st.markdown(f"### {lote_atual}")
if lote_info:
    st.markdown(f"**{lote_info}**")

if estoque_disponivel == 0:
    st.warning("Ingressos esgotados.")
    st.stop()

quantidade = st.number_input(
    "Quantidade de ingressos",
    min_value=1,
    max_value=int(estoque_disponivel),
    value=1,
    step=1
)

# --- Formul√°rio ---
with st.form("formulario_ingresso"):
    email = st.text_input("E-mail para contato")

    nomes = []
    documentos = []
    for i in range(int(quantidade)):
        col1, col2 = st.columns(2)
        with col1:
            nome = st.text_input(f"Nome do participante #{i+1}", key=f"nome_{i}")
        with col2:
            doc = st.text_input(f"Documento do participante #{i+1}", key=f"doc_{i}")
        nomes.append(nome)
        documentos.append(doc)

    if link_pagamento:
        st.markdown(f"### üí≥ [Clique aqui para pagar seu ingresso]({link_pagamento})")

    comprovante = st.file_uploader(
        "Envie o comprovante de pagamento (imagem ou PDF)", 
        type=["png", "jpg", "jpeg", "pdf"]
    )

    enviado = st.form_submit_button("Reservar ingresso e Enviar Pedido")

    if enviado:
        # --- Valida√ß√£o dos campos ---
        if (
            email.strip() == "" or
            not email_valido(email) or
            any(nome.strip() == "" for nome in nomes) or
            any(doc.strip() == "" for doc in documentos) or
            comprovante is None
        ):
            st.warning("Por favor, preencha todos os campos corretamente e envie o comprovante antes de enviar o pedido.")
        else:
            datahora = datetime.now().strftime("%d/%m/%Y %H:%M:%S")
            novo_pedido = {
                'E-mail': email,
                'Quantidade': quantidade,
                'Nomes': ', '.join(nomes),
                'Documentos': ', '.join(documentos),
                'DataHora': datahora
            }

            # --- Salvar CSV ---
            if os.path.exists(arquivo_csv):
                df = pd.read_csv(arquivo_csv)
                df = pd.concat([df, pd.DataFrame([novo_pedido])], ignore_index=True)
            else:
                df = pd.DataFrame([novo_pedido])
            df.to_csv(arquivo_csv, index=False)

            st.success(f"Ingressos reservados para: {', '.join(nomes)}. Confira seu e-mail para mais informa√ß√µes.")
            remetente = os.getenv("EMAIL_REMETENTE")
            senha = os.getenv("EMAIL_SENHA")
            destinatario = os.getenv("EMAIL_DESTINATARIO")

            if not remetente or not senha or not destinatario:
                st.error("‚ùå Vari√°veis de ambiente n√£o configuradas corretamente.")
                st.stop()

            lista_destinatarios = [d.strip() for d in destinatario.split(",")]

            corpo = f"""
Novo pedido de ingresso:

E-mail do respons√°vel: {email}
Quantidade de ingressos: {quantidade}
Data/Hora do pedido: {datahora}

Participantes:
""" + "\n".join([f"{i+1}. Nome: {nomes[i]}, Documento: {documentos[i]}" for i in range(int(quantidade))])

            try:
                enviar_email(
                    remetente,
                    senha,
                    lista_destinatarios,
                    "Novo pedido de ingresso",
                    corpo,
                    comprovante,
                    arquivo_csv
                )
                st.success("Dados enviados por e-mail para a organiza√ß√£o!")
            except Exception as e:
                st.error(f"Erro ao enviar e-mail: {e}")

            # Enviar para Google Sheets
            sheet.append_row([
                email,
                quantidade,
                ', '.join(nomes),
                ', '.join(documentos),
                datahora
            ])